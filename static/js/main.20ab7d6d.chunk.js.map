{"version":3,"sources":["actions/todo/types.ts","reducers/todoReducer.ts","actions/todo/actions.ts","selectors/todo-selectors.ts","components/todos/TodoPage/TodoHeader/TodoFilter/TodoFilterComponent.tsx","components/todos/TodoPage/TodoHeader/TodoFilter/TodoFilter.tsx","components/todos/TodoPage/TodoHeader/TodoHeader.tsx","components/todos/TodoPage/TodoHeader/index.js","components/todos/TodoPage/TodoHeader/TodoHeaderComponent.tsx","components/todos/TodoPage/TodoList/TodoList.tsx","components/todos/TodoPage/TodoList/index.ts","components/todos/TodoPage/TodoList/TodoListComponent.tsx","components/todos/TodoPage/TodoForm/TodoFormComponent.tsx","components/todos/TodoPage/TodoForm/index.ts","components/todos/TodoPage/TodoForm/TodoForm.tsx","components/todos/TodoPage/TodoPage.tsx","App.tsx","reducers/index.ts","sagas/index.ts","store/index.ts","index.tsx"],"names":["TodoActionKeys","TodoStatus","initialState","todos","JSON","parse","localStorage","getItem","filters","Object","values","filter","value","activeFilter","All","searchTerm","changeActiveFilter","newActiveFilter","type","CHANGE_ACTIVE_FILTER","payload","updateSearchTerm","newSearchTerm","UPDATE_SEARCH_TERM","getActiveFilter","state","getFilters","getActiveTodos","createSelector","todo","status","formatTime","time","moment","format","getActiveTodosByTerm","length","text","toLowerCase","match","RadioButton","styled","Radio","Button","_templateObject","RadioGroup","Group","_templateObject2","mapDispatchToProps","TodoFilter","connect","_ref","filtersMarkup","map","react","key","size","onChange","e","target","buttonStyle","searchTermChange","newTerm","SEARCH_TERM_CHANGED","TodoHeader","react_default","a","createElement","Fragment","input","className","prefix","icon","deleteTodo","id","DELETE_TODO","updateTodo","UPDATE_TODO","TodoList","React","isInProgress","interval","setInterval","timeTillEnd","clearInterval","columns","title","dataIndex","render","date","Date","toLocaleDateString","tags","tag","es_tag","color","estimatedTime","record","onClick","Paused","Completed","Active","table","rowClassName","dataSource","pagination","InputGroup","Input","TodoFormComponent_templateObject","createTodoValidationSchema","Yup","shape","required","min","TodoForm","addTodo","ADD_TODO","objectSpread","Math","random","createdAt","now","formik_esm","initialValues","validationSchema","onSubmit","_ref2","resetForm","_ref3","errors","touched","time_picker","props","toDate","getTime","defaultOpenValue","name","_ref4","field","FormItem_default","validateStatus","undefined","help","assign","arrayHelpers","index","concat","_ref5","style","width","padding","suffix","remove","es_button","push","htmlType","disabled","keys","TodoPage","TodoPage_TodoHeader","TodoPage_TodoList","TodoPage_TodoForm","useEffect","saveItemsToLocalStorage","window","setItem","stringify","addEventListener","removeEventListener","layout","Content","minHeight","background","todos_TodoPage_TodoPage","Footer","textAlign","rootReducer","combineReducers","arguments","action","toConsumableArray","updatedTodos","todoSearch","watchTodoSearch","rootSaga","regenerator_default","wrap","_context","prev","next","put","stop","_marked","_context2","debounce","_marked2","_context3","all","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.20ab7d6d.chunk.js","sourcesContent":["import { UpdateTodoModel } from './../../dto/update-todo.model';\r\nimport { CreateTodoModel } from './../../dto/create-todo.model';\r\nimport { TodoStatus, ITodo } from './../../reducers/todoReducer';\r\n\r\nexport enum TodoActionKeys {\r\n  ADD_TODO = 'ADD_TODO',\r\n  UPDATE_TODO = 'UPDATE_TODO',\r\n  DELETE_TODO = 'DELETE_TODO',\r\n  CHANGE_ACTIVE_FILTER = 'CHANGE_ACTIVE_FILTER',\r\n  UPDATE_SEARCH_TERM = 'UPDATE_SEARCH_TERM',\r\n  SEARCH_TERM_CHANGED = 'SEARCH_TERM_CHANGED',\r\n\r\n}\r\n\r\nexport interface AddTodoAction {\r\n  readonly type: TodoActionKeys.ADD_TODO;\r\n  readonly payload: ITodo;\r\n}\r\n\r\nexport interface DeleteTodoAction {\r\n  readonly type: TodoActionKeys.DELETE_TODO;\r\n  readonly payload: number;\r\n}\r\n\r\nexport interface UpdateTodoAction {\r\n  readonly type: TodoActionKeys.UPDATE_TODO;\r\n  readonly payload: UpdateTodoModel;\r\n}\r\n\r\nexport interface ChangeActiveFilterAction {\r\n  readonly type: TodoActionKeys.CHANGE_ACTIVE_FILTER;\r\n  readonly payload: TodoStatus;\r\n}\r\n\r\nexport interface UpdateSearchTermAction {\r\n  readonly type: TodoActionKeys.UPDATE_SEARCH_TERM;\r\n  readonly payload: string;\r\n}\r\n\r\n\r\nexport type TodoActionTypes = AddTodoAction\r\n  | DeleteTodoAction\r\n  | UpdateTodoAction\r\n  | ChangeActiveFilterAction\r\n  | UpdateSearchTermAction;","import todos from './../__data/Todos';\r\nimport {\r\n  TodoActionKeys,\r\n  TodoActionTypes\r\n} from './../actions/todo/types';\r\nexport interface ITodo {\r\n  id: number;\r\n  text: string;\r\n  status?: TodoStatus;\r\n  createdAt?: Date;\r\n  tags?: string[];\r\n  estimatedTime?: number;\r\n  timeTillEnd?: number;\r\n}\r\n\r\nexport enum TodoStatus {\r\n  All, Active, Completed, 'In Progress', Paused\r\n};\r\n\r\nexport interface TodoState {\r\n  todos: ITodo[];\r\n  filters: TodoStatus[];\r\n  activeFilter: TodoStatus;\r\n  searchTerm: string;\r\n}\r\n\r\nconst initialState: TodoState = {\r\n  todos: <ITodo[]>JSON.parse(localStorage.getItem('todos') || '[]'),\r\n  filters: Object.values(TodoStatus).filter(value => typeof value === 'number'),\r\n  activeFilter: TodoStatus.All,\r\n  searchTerm: ''\r\n};\r\n\r\nexport default (state: TodoState = initialState, action: TodoActionTypes): TodoState => {\r\n  switch (action.type) {\r\n    case TodoActionKeys.ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          ...state.todos,\r\n          { ...action.payload }\r\n        ]\r\n      }\r\n    case TodoActionKeys.DELETE_TODO: {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => todo.id !== action.payload)\r\n      };\r\n    }\r\n    case TodoActionKeys.UPDATE_TODO: {\r\n      const updatedTodos = state.todos.map(todo => {\r\n        if (todo.id === action.payload.id)\r\n          todo = { ...todo, ...action.payload };\r\n        return todo;\r\n      })\r\n      return {\r\n        ...state,\r\n        todos: [...updatedTodos]\r\n      };\r\n    }\r\n    case TodoActionKeys.CHANGE_ACTIVE_FILTER: {\r\n      return {\r\n        ...state,\r\n        activeFilter: action.payload\r\n      };\r\n    }\r\n    case TodoActionKeys.UPDATE_SEARCH_TERM: {\r\n      return {\r\n        ...state,\r\n        searchTerm: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}","import { CreateTodoModel } from './../../dto/create-todo.model';\r\nimport { TodoStatus } from './../../reducers/todoReducer';\r\nimport { TodoActionKeys } from './types';\r\nimport { UpdateTodoModel } from '../../dto/update-todo.model';\r\n\r\nexport const updateTodo = (todo: UpdateTodoModel) => ({\r\n  type: TodoActionKeys.UPDATE_TODO,\r\n  payload: todo\r\n});\r\n\r\nexport const deleteTodo = (id: number) => ({\r\n  type: TodoActionKeys.DELETE_TODO,\r\n  payload: id\r\n});\r\n\r\nexport const addTodo = (values: CreateTodoModel) => ({\r\n  type: TodoActionKeys.ADD_TODO,\r\n  payload: {\r\n    id: Math.random(),\r\n    createdAt: new Date(Date.now()),\r\n    status: TodoStatus.Active,\r\n    timeTillEnd: values.estimatedTime,\r\n    ...values,\r\n  }\r\n});\r\n\r\nexport const changeActiveFilter = (newActiveFilter: TodoStatus) => ({\r\n  type: TodoActionKeys.CHANGE_ACTIVE_FILTER,\r\n  payload: newActiveFilter\r\n});\r\n\r\nexport const updateSearchTerm = (newSearchTerm: string) => ({\r\n  type: TodoActionKeys.UPDATE_SEARCH_TERM,\r\n  payload: newSearchTerm\r\n});\r\n\r\nexport const searchTermChange = (newTerm: string) => ({\r\n  type: TodoActionKeys.SEARCH_TERM_CHANGED,\r\n  payload: newTerm\r\n});","import { AppState } from './../store/index';\r\nimport { createSelector } from 'reselect';\r\nimport { ITodo, TodoStatus } from '../reducers/todoReducer';\r\nimport moment from 'moment';\r\n\r\nexport const getTodos = (state: AppState) =>\r\n  state.todos.todos;\r\nexport const getActiveFilter = (state: AppState) =>\r\n  state.todos.activeFilter;\r\n\r\nexport const getFilters = (state: AppState) =>\r\n  state.todos.filters;\r\n\r\nexport const getSearchTerm = (state: AppState) =>\r\n  state.todos.searchTerm;\r\n\r\nexport const getActiveTodos = createSelector(\r\n  getTodos,\r\n  getActiveFilter,\r\n  (todos: ITodo[], activeFilter: TodoStatus) => {\r\n    return todos\r\n      .filter(\r\n        todo =>\r\n          todo.status\r\n            ? todo.status === activeFilter\r\n            || activeFilter === TodoStatus.All\r\n            : false\r\n      );\r\n  }\r\n);\r\n\r\nexport const formatTime = (time: number) => {\r\n  return moment(time).format('HH:mm:ss');\r\n}\r\n\r\nexport const getActiveTodosByTerm = createSelector(\r\n  getActiveTodos,\r\n  getSearchTerm,\r\n  (todos: ITodo[], searchTerm: string) => {\r\n    if (searchTerm.length)\r\n      return todos.filter(\r\n        (todo: ITodo) => todo.text.toLowerCase().match(searchTerm.toLowerCase())\r\n      )\r\n    else\r\n      return todos;\r\n  }\r\n);","import * as React from 'react';\r\nimport { TodoStatus } from '../../../../../reducers/todoReducer';\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { Radio } from 'antd';\r\n\r\ninterface Props {\r\n  activeFilter: TodoStatus;\r\n  filters: TodoStatus[];\r\n  changeActiveFilter(filter: TodoStatus): void;\r\n}\r\n\r\nconst RadioButton = styled(Radio.Button)`\r\n  flex: 1;\r\n  text-align: center;\r\n`;\r\n\r\nconst RadioGroup = styled(Radio.Group)`\r\n  display: flex !important;\r\n  width: 100%;\r\n  @media screen and (max-width: 800px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const TodoFilterComponent: React.FC<Props> = ({ activeFilter, filters, changeActiveFilter }) => {\r\n  const filtersMarkup = filters.map(\r\n    filter => (\r\n      <RadioButton\r\n        key={filter}\r\n        value={filter}>\r\n        {TodoStatus[filter]}\r\n      </RadioButton>\r\n    )\r\n  );\r\n  return (\r\n    <RadioGroup\r\n      size='large'\r\n      value={activeFilter}\r\n      onChange={(e) => changeActiveFilter(e.target.value)}\r\n      buttonStyle=\"solid\">\r\n      {filtersMarkup}\r\n    </RadioGroup>\r\n  );\r\n}","import { connect } from 'react-redux';\r\nimport { AppState } from './../../../../../store';\r\nimport { changeActiveFilter } from './../../../../../actions/todo/actions';\r\n\r\nimport { getActiveFilter, getFilters } from './../../../../../selectors/todo-selectors';\r\nimport { TodoFilterComponent } from './TodoFilterComponent';\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  changeActiveFilter\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  activeFilter: getActiveFilter(state),\r\n  filters: getFilters(state),\r\n});\r\n\r\nexport const TodoFilter = connect(mapStateToProps, mapDispatchToProps)(TodoFilterComponent);","import { connect } from 'react-redux';\r\n\r\nimport { AppState } from '../.././../../store';\r\nimport { changeActiveFilter, updateSearchTerm, searchTermChange } from './../../../../actions/todo/actions';\r\nimport { getActiveFilter, getFilters } from './../../../../selectors/todo-selectors';\r\n\r\nimport { TodoHeaderComponent } from './TodoHeaderComponent';\r\n\r\nconst mapDispatchToProps = {\r\n  changeActiveFilter,\r\n  updateSearchTerm,\r\n  searchTermChange\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  activeFilter: getActiveFilter(state),\r\n  filters: getFilters(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeaderComponent);","import TodoHeader from \"./TodoHeader\";\r\n\r\nexport default TodoHeader;","import React from 'react';\r\nimport { Input, Icon } from 'antd';\r\n\r\nimport { TodoStatus } from '../../../../reducers/todoReducer';\r\nimport { TodoFilter } from './TodoFilter/TodoFilter';\r\n\r\ninterface Props {\r\n  activeFilter: TodoStatus;\r\n  filters: TodoStatus[];\r\n  changeActiveFilter(filter: TodoStatus): void;\r\n  searchTermChange(newTerm: string): void;\r\n}\r\n\r\nexport const TodoHeaderComponent: React.FC<Props> = ({\r\n  searchTermChange\r\n}) => {\r\n  return (\r\n    <>\r\n      <Input\r\n        className='my-3'\r\n        onChange={(e) => searchTermChange(e.target.value)}\r\n        prefix={<Icon type=\"search\" />}\r\n        size='large'\r\n        type=\"text\" />\r\n      <TodoFilter />\r\n    </>\r\n  );\r\n}","import { connect } from 'react-redux';\r\n\r\nimport { AppState } from './../../../../store';\r\n\r\nimport { deleteTodo, updateTodo } from '../../../../actions/todo/actions';\r\n\r\nimport { getActiveTodosByTerm } from '../../../../selectors/todo-selectors';\r\n\r\nimport { ITodo } from '../../../../reducers/todoReducer';\r\n\r\nimport { TodoListComponent } from './TodoListComponent';\r\nimport { UpdateTodoModel } from '../../../../dto/update-todo.model';\r\n\r\nexport interface IStateProps { \r\n  todos: ITodo[];\r\n};\r\nexport interface IDispatchProps {\r\n  deleteTodo(id: number): void;\r\n  updateTodo(updateTodoModel: UpdateTodoModel): void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): IStateProps => ({\r\n  todos: getActiveTodosByTerm(state)\r\n});\r\n\r\nconst mapDispatchToProps = { deleteTodo, updateTodo }\r\n\r\nexport default connect<IStateProps, IDispatchProps, null, AppState>(mapStateToProps, mapDispatchToProps)(TodoListComponent);","import TodoList from \"./TodoList\";\r\n\r\nexport default TodoList;","import * as React from 'react';\r\n\r\nimport { ITodo, TodoStatus } from './../../../../reducers/todoReducer';\r\n\r\nimport { Table, Icon, Tag } from 'antd';\r\n\r\nimport { IStateProps, IDispatchProps } from './TodoList';\r\n\r\nimport './TodoItem/TodoItem.scss';\r\nimport { formatTime } from '../../../../selectors/todo-selectors';\r\n\r\ntype Props = IStateProps & IDispatchProps;\r\n\r\nexport const TodoListComponent: React.FC<Props> = ({ todos, deleteTodo, updateTodo }) => {\r\n  React.useEffect(() => {\r\n\r\n    const isInProgress = (todo: ITodo) => todo.status === TodoStatus['In Progress'];\r\n    const exist = <T, K extends keyof T>(prop: K, obj: T) => (obj[prop]) !== null && (obj[prop]) !== undefined;\r\n    const interval = setInterval(() => todos.filter(isInProgress).map(todo => {\r\n\r\n      if (todo.timeTillEnd) {\r\n        updateTodo({ id: todo.id, timeTillEnd: todo.timeTillEnd - 1000 < 0 ? 0 : todo.timeTillEnd - 1000 })\r\n      }\r\n    }), 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: 'text',\r\n      dataIndex: 'text',\r\n      key: 'text',\r\n      render: (text: string) => (\r\n        <span className='todo__item__text'>{text}</span>\r\n      )\r\n    },\r\n    {\r\n      title: 'status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (status: number) => (\r\n        <span className='todo__item__status'>{TodoStatus[status]}</span>\r\n      )\r\n    },\r\n    {\r\n      title: 'createdAt',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n      render: (date: Date) => <span>{new Date(date).toLocaleDateString()}</span>\r\n    },\r\n    {\r\n      title: 'Tags',\r\n      dataIndex: \"tags\",\r\n      key: 'tags',\r\n      render: (tags: string[]) => (\r\n        <span>\r\n          {tags && tags.map(tag => <Tag color=\"blue\" key={tag}>#{tag}</Tag>)}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: 'Estimated Time',\r\n      dataIndex: \"estimatedTime\",\r\n      key: 'estimatedTime',\r\n      render: (estimatedTime: number) => (\r\n        <span>\r\n          {estimatedTime && formatTime(estimatedTime)}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: 'Left',\r\n      dataIndex: \"timeTillEnd\",\r\n      key: 'timeTillEnd',\r\n      render: (timeTillEnd: number) => (\r\n        <span>\r\n          {timeTillEnd && formatTime(timeTillEnd)}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: 'Actions',\r\n      key: 'actions',\r\n      render: (record: ITodo) => {\r\n        return <span className='todo__item__icons'>\r\n          <Icon\r\n            className=\"todo__item__icon todo__item__icon--toggle\"\r\n            onClick={() => updateTodo({ id: record.id, status: record.status === TodoStatus[\"In Progress\"] ? TodoStatus.Paused : TodoStatus[\"In Progress\"] })}\r\n            type={record.status === TodoStatus[\"In Progress\"] ? \"pause\" : 'caret-right'} />\r\n          <Icon\r\n            className=\"todo__item__icon todo__item__icon--toggle\"\r\n            onClick={() => updateTodo({ id: record.id, status: record.status === TodoStatus.Completed ? TodoStatus.Active : TodoStatus.Completed })}\r\n            type={record.status === TodoStatus.Completed ? \"close-circle\" : 'check-circle'} />\r\n          <Icon\r\n            className=\"todo__item__icon todo__item__icon--delete\"\r\n            onClick={() => deleteTodo(record.id)}\r\n            type=\"delete\" />\r\n        </span>\r\n      }\r\n    }\r\n  ];\r\n  return <Table rowClassName={(record: ITodo) => record.status === TodoStatus.Completed ? 'todo__item--completed' : ''} columns={columns} dataSource={todos} pagination={false} />\r\n};","import * as React from 'react';\r\nimport { Input, Button, Icon, Tag, InputNumber, TimePicker } from 'antd';\r\nimport * as Yup from 'yup';\r\n\r\nimport { Formik, Form, Field, FieldProps, FieldArray } from 'formik';\r\nimport FormItem from 'antd/lib/form/FormItem';\r\nimport { CreateTodoModel } from '../../../../dto/create-todo.model';\r\nimport styled from \"styled-components\";\r\nimport moment from 'moment';\r\n\r\nconst InputGroup = styled(Input.Group)`\r\n  display: flex !important;\r\n  margin: 0 -10px !important;\r\n  flex-wrap: wrap;\r\n  width: calc(100% + 20px) !important;\r\n`;\r\ninterface Props {\r\n  addTodo(values: CreateTodoModel): void;\r\n}\r\n\r\nconst createTodoValidationSchema = Yup.object().shape({\r\n  text: Yup.string().required(),\r\n  tags: Yup.array(Yup.string().min(3)),\r\n  estimatedTime: Yup.number().min(0)\r\n});\r\n\r\nexport const TodoForm: React.FC<Props> = ({ addTodo }) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{ text: '', tags: [], estimatedTime: 0 }}\r\n      validationSchema={createTodoValidationSchema}\r\n      onSubmit={(values, { resetForm }) => {\r\n        addTodo(values);\r\n        resetForm();\r\n      }}\r\n      render={({ values, errors, status, touched }) => (\r\n        <Form className='my-3'>\r\n          <TimePicker\r\n            className='my-2'\r\n            onChange={(props) => {\r\n              values.estimatedTime = props.toDate().getTime();\r\n            }}\r\n            defaultOpenValue={moment('00:00:00', 'HH:mm:ss')}\r\n            size='large' />\r\n          <Field type=\"text\" name=\"text\" render={({ field }: FieldProps) => (\r\n            <FormItem\r\n              validateStatus={touched.text && errors.text ? 'error' : undefined}\r\n              help={touched.text && errors.text}>\r\n              <Input\r\n                {...field}\r\n                prefix={<Icon type=\"plus\" />}\r\n                size='large'\r\n                type=\"text\" />\r\n            </FormItem>\r\n          )} />\r\n          <FieldArray\r\n            name='tags'\r\n            render={arrayHelpers => (\r\n              <>\r\n                <InputGroup>\r\n                  {\r\n                    values.tags.length > 0\r\n                    && values.tags.map((tag, index) => (\r\n                      <Field key={index} name={`tags.${index}`} render={({ field }: FieldProps) => (\r\n                        <FormItem\r\n                          style={{ width: '20%', padding: '10px' }}\r\n                          validateStatus={touched.tags && touched.tags[index] && errors.tags && errors.tags[index] ? 'error' : undefined}\r\n                          help={touched.tags && touched.tags[index] && errors.tags && errors.tags[index]}>\r\n                          <Input\r\n\r\n                            suffix={<Icon type=\"minus\" onClick={() => arrayHelpers.remove(index)} />}\r\n                            {...field}\r\n                            size='large'\r\n                            type=\"text\"\r\n                            className=\"todo-input\" />\r\n                        </FormItem>\r\n                      )} />\r\n                    ))\r\n                  }\r\n                </InputGroup>\r\n                <Button className='todo__item__button--small' onClick={() => arrayHelpers.push('')}>\r\n                  Add a tag\r\n                </Button>\r\n              </>\r\n            )}\r\n          />\r\n          <Button\r\n            style={{ width: '100%' }} htmlType='submit' disabled={!!Object.keys(errors).length} size='large'>Add ToDo</Button>\r\n        </Form>\r\n      )}\r\n    >\r\n    </Formik>\r\n  )\r\n};\r\n\r\n","import TodoForm from './TodoForm';\r\n\r\nexport default TodoForm;","import { connect } from 'react-redux';\r\nimport { TodoForm } from './TodoFormComponent';\r\nimport { addTodo } from '../../../../actions/todo/actions';\r\nimport { CreateTodoModel } from '../../../../dto/create-todo.model';\r\n\r\ninterface DispatchFromProps {\r\n  addTodo(values: CreateTodoModel): void;\r\n}\r\n\r\nexport default connect<{}, DispatchFromProps>(\r\n  () => ({}),\r\n  { addTodo }\r\n)(TodoForm);\r\n\r\n\r\n","import * as React from 'react';\r\n\r\nimport TodoHeader from './TodoHeader';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\n\r\nimport './TodoPage.scss';\r\n\r\nclass TodoPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"todo-page\">\r\n        <TodoHeader />\r\n        <TodoList />\r\n        <TodoForm />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoPage;","import React, { Component, useEffect } from 'react';\nimport TodoPage from './components/todos/TodoPage/TodoPage';\nimport { Layout } from 'antd';\n\nimport 'antd/dist/antd.css';\nimport { connect } from 'react-redux';\nimport { AppState } from './store';\nimport { ITodo } from './reducers/todoReducer';\n\ninterface Props {\n  todos: ITodo[]\n};\n\nconst App: React.FC<Props> = ({ todos }) => {\n\n  useEffect(() => {\n    const saveItemsToLocalStorage = () =>\n      window.localStorage.setItem('todos', JSON.stringify(todos))\n\n    window.addEventListener('beforeunload', saveItemsToLocalStorage);\n\n    return function () {\n      window.removeEventListener('beforeunload', saveItemsToLocalStorage);\n    }\n  })\n  return (\n    <Layout>\n      <Layout.Content style={{ padding: '50px 0', minHeight: 'calc(100vh - 69px)', background: '#fff' }}>\n        <TodoPage />\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: 'center' }}>\n        ToDo App ©2019 Created by Max Chykalo\n      </Layout.Footer>\n    </Layout>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  todos: state.todos.todos\n});\n\nexport default connect(mapStateToProps)(App);\n","import todoReducer, { TodoState } from \"./todoReducer\";\r\nimport { combineReducers, Reducer } from \"redux\";\r\n\r\n// TODO: \"as any\" is used to remove errors caused by redux.\r\nexport const rootReducer = combineReducers({todos : todoReducer} as any);\r\n\r\n","import { call, takeEvery, put, all, debounce } from 'redux-saga/effects';\r\n\r\nimport { TodoActionKeys, UpdateSearchTermAction } from './../actions/todo/types';\r\nimport { updateSearchTerm } from '../actions/todo/actions';\r\n\r\nexport function* todoSearch(action: UpdateSearchTermAction) {\r\n\r\n  yield put(updateSearchTerm(action.payload));\r\n  // debugger;\r\n}\r\n\r\nexport function* watchTodoSearch(): IterableIterator<any> {\r\n  yield debounce(500, TodoActionKeys.SEARCH_TERM_CHANGED, todoSearch);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchTodoSearch()\r\n  ])\r\n}","import { TodoState } from './../reducers/todoReducer';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { rootReducer } from '../reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootSaga from '../sagas';\r\n\r\nexport interface AppState {\r\n  todos: TodoState\r\n};\r\n// ...\r\n// import { rootSaga } from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(sagaMiddleware)\r\n  )\r\n)\r\nsagaMiddleware.run(rootSaga)\r\n\r\nconst action = (type: string) => store.dispatch({type})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n  <App />\r\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}